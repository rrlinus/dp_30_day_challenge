Consider the decimal presentation of an integer. Let's call a number d-magic if digit d appears in decimal presentation of the number on even positions and nowhere else.

For example, the numbers 1727374, 17, 1 are 7-magic but 77, 7, 123, 34, 71 are not 7-magic. On the other hand the number 7 is 0-magic, 123 is 2-magic, 34 is 4-magic and 71 is 1-magic.

Find the number of d-magic numbers in the segment [a, b] that are multiple of m. Because the answer can be very huge you should only find its value modulo 109 + 7 (so you should find the remainder after dividing by 109 + 7).









#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll M=1000000007;
ll m,d;
string s;
ll dp[2001][2001][2][2][2];
ll magic(ll pos,ll mo,ll tight,ll even,ll st){
    if(pos==s.length()){
        return mo==0 and st;
    }
    if(dp[pos][mo][tight][even][st]!=-1){
        return dp[pos][mo][tight][even][st]%M;
    }
    ll en=tight?(s[pos]-'0'):9;
    // cout<<en<<endl;
    ll ans=0;
    for(ll i=0;i<=en;i++){
        if(st==0 and i==0){
            ans =(ans + magic(pos+1,(mo*10+i)%d,tight&(i==en),even,0))%M;
        }
        else{
            if((even and i==m) or (!even and i!=m))
            ans =(ans +magic(pos+1,(mo*10+i)%d,tight&(i==en),!even,(st|(i>0))))%M;
        }
    }
    return dp[pos][mo][tight][even][st]=ans%M;
}
string l,r;
int main() {
// 	cout<<"GfG!";
ios_base::sync_with_stdio(false);
cin.tie(0);
cout.tie(0);
cin>>d>>m;
cin>>l>>r;
s=r;
memset(dp,-1,sizeof(dp));
ll ans=magic(0,0,1,0,0);
// cout<<ans<<endl;
s=l;
memset(dp,-1,sizeof(dp));
ans =(ans-magic(0,0,1,0,0)+M)%M;
// cout<<ans<<endl;
ll flag=0;
ll mo=0;
for(ll i=0;i<l.length();i++){
    mo=(mo*10+(s[i]-'0'))%d;
    if((i%2 and m!=(l[i]-'0')) or (i%2==0 and m==(l[i]-'0'))){
        flag=1;
        break;
    }
}
// cout<<mo<<endl;
if(flag==0 and mo==0){
    ans +=1;
}
cout<<ans<<endl;
	return 0;
}