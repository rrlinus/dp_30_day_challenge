Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)

...............Kruskals Algorithm..........
#include <bits/stdc++.h>
using namespace std;
struct node{
    int f,s,w;
};
int getParent(int parent[],int x){
    if(parent[x]==x){
        return x;
    }
    return getParent(parent,parent[x]);
}
bool comp(node x,node y){
    return x.w<y.w;
}
int main(){
    int v,e;
    cin>>v>>e;
    node edges[e];
    for(int i=0;i<e;i++){
        cin>>edges[i].f>>edges[i].s>>edges[i].w;
    }
    sort(edges,edges+e,comp);
    int parent[v];
    for(int i=0;i<v;i++){
        parent[i]=i;
    }
    int ct=0;
    for(int i=0;i<e;i++){
        if(ct==v-1){
            break;
        }
        int x=getParent(parent,edges[i].f);
        int y=getParent(parent,edges[i].s);
        if(x!=y){
            parent[x]=y;
            cout<<min(edges[i].f,edges[i].s)<<" "<<max(edges[i].f,edges[i].s)<<" "<<edges[i].w<<endl;
            ct++;
        }
    }
    
    
}