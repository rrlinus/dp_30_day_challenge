Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
....................Prims Algorithm..............
#include <bits/stdc++.h>
using namespace std;
int getMinWeight(int weight[],bool vis[],int v){
    int minVertex=-1;
    for(int i=0;i<v;i++){
        if(!vis[i] and (minVertex==-1 or weight[minVertex]>weight[i])){
            minVertex=i;
        }
    }
      return minVertex;
}
int main(){
    int v,e;
    cin>>v>>e;
    int graph[v][v];
    memset(graph,0,sizeof(graph));
    int f,s,w;
    for(int i=0;i<e;i++){
        cin>>f>>s>>w;
        graph[f][s]=w;
        graph[s][f]=w;
    }
    int parent[v];
    int weight[v];
    for(int i=0;i<v;i++)
        weight[i]=INT_MAX;
    weight[0]=0;
    parent[0]=-1;
    bool vis[v];
    memset(vis,false,sizeof(vis));
    for(int i=0;i<v-1;i++){
        int minVertex=getMinWeight(weight,vis,v);
        vis[minVertex]=true;
        for(int j=0;j<v;j++){
            if(!vis[j] and graph[minVertex][j] and weight[j]>graph[minVertex][j] ){
                weight[j]=graph[minVertex][j]; 
                parent[j]=minVertex;
            }
        }
    }
    for(int i=1;i<=v-1;i++){
        cout<<min(parent[i],i)<<" "<<max(i,parent[i])<<" "<<weight[i]<<endl;
    }
}
