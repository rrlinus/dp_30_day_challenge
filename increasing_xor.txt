You are given a sequence of n integers a1, ..., an. Count the number of sequences b = b1, ..., bn such that: 0 ≤ b1 ≤ ... ≤ bn < 231 and (a1 XOR b1) ≤ … ≤ (an XOR bn). Return this count, modulo 109+7.
.................
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
ll dp[33][(1<<6)][(1<<6)];
ll n;

ll M=(ll)1e9+7;
ll ar[10];
ll solve ( ll pos, ll xortight, ll btight ){
    if ( pos == 31 )
        return 1;
    if ( dp[pos][xortight][btight] != -1 )
        return dp[pos][xortight][btight];
    ll a=0;
    ll ret=0;
    // for(ll i=0;i<n;i++){
    //     if( ar[i]&(1<<(30-pos)) )
    //      a |= (i<<i);
    // }
    for ( ll i = 0; i < n; i ++)
        if ( ar[i]&(1<<(30-pos)) )
            a |= (1<<i);

    // 
        for ( ll xo = 0; xo < (1<<n); xo ++){
        ll b = xo^a;
        bool flg = 1;
        ll thisbit = 0, nexbit = 0, xntight=0,bntight=0;
        for ( ll i = n-1; i >= 0; i -- ){
            thisbit = ((b&(1<<i))?1:0);
            if ( btight&(1<<i) ){
                if ( nexbit < thisbit )
                    flg = 0;
                if ( nexbit == thisbit )
                    bntight |= (1<<i);
            }
            nexbit = thisbit;
        }
        for ( ll i = n-1; i >= 0; i -- ){
            thisbit = ((xo&(1<<i))?1:0);
            if ( xortight&(1<<i) ){
                if ( nexbit < thisbit )
                    flg = 0;
                if ( nexbit == thisbit )
                    xntight |= (1<<i);
            }
            nexbit = thisbit;
        }
        if ( flg ){
            ret = ( ret + solve(pos+1,xntight,bntight))%M;
        }
    }
    return dp[pos][xortight][btight] = ret;
    
    
}
int main() {
// 	cout<<"GfG!";
ll t;
cin>>t;
    while ( t-- ){
        cin >> n;
        memset(dp,-1,sizeof dp);
        for ( ll i = 0; i < n; i ++)
            cin >> ar[i];
        cout << solve(0,(1<<(n-1))-1,(1<<(n-1))-1) <<"\n";
    }
	return 0;
}